version: '3.8'

services:
  reverse-proxy:
    image: traefik:v2.2
    ports:
      # The HTTP ports
      - "80:80"
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/:/etc/traefik"
      - "/var/log/docker/traefik/:/var/log/traefik"
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_proxy
      #- traefik.http.middlewares.redirect-https.redirectScheme.scheme=https
      #- traefik.http.middlewares.redirect-https.redirectScheme.permanent=true
      #– "traefik.http.routers.api.service=api@internal" # <== Enabling the api to be a service to access
      #– "traefik.http.routers.api.rule=Host(`bsp.domain.bsp`)" # <== Setting the domain for the dashboard
      #– "traefik.http.routers.api.entrypoints=web" # <== Defining the entrypoint for http, **ref: line 22
      #– "traefik.http.routers.api-secured.service=api@internal" # <== Enabling the api to be a service to access on https
      #– "traefik.http.routers.api-secured.rule=Host(`bsp.domain.bsp`)" # <== Your Domain Name for the https rule
      #– "traefik.http.routers.api-secured.entrypoints=secured-web" # <== Defining entrypoint for https, **ref: line 23
      #– "traefik.http.routers.api-secured.tls.certresolver=bsp-resolver" # <== Defining certsresolvers for https
      #– "traefik.http.routers.api-secured.middlewares=dshbrd-auth" # <== This is a middleware to restrict access to known users

networks:
  proxy: